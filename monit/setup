#!/bin/bash

PD=${0%/*}
[ "$PD" ] && cd "$PD"
[ -e ./${0##*/} ] || {
    echo "Cannot find source directory"
    exit 1
}

my_system=$1

case $my_system in
    slac|tucson|chile) : ;;
    *)
        echo "Specify slac|tucson|chile"
        exit 1
        ;;
esac

shost=${HOSTNAME%%.*}


for f in freeipmi monit; do
    rpm -q --quiet $f || yum -q -y install $f
done


mkdir -p /var/monit             # not sure if program creates this...

## Change check interval from 30s to 5m.
## TODO? add "read-only" to the allow line?
sed -i.ORIG 's/^set daemon  30 /set daemon  300 /' /etc/monitrc


monitd=/etc/monit.d


## TODO add another email address in case slack is down.
case $my_system in
    slac)
        mailhost=smtpunix.slac.stanford.edu
        ## cam-ir2-computing-alerts
        monit_addr=k2p7u7n6e7u4r2r7@lsstc.slack.com
        ;;
    tucson)
        mailhost=mail.lsst.org
        ## comcam-alerts
        monit_addr=x7z0x9c0t2k4r1n1@lsstc.slack.com
        ;;
    *)
        mailhost=localhost
        monit_addr=root@localhost
        echo "WARNING: monit mailhost etc not set"
        ;;
esac


f=$monitd/alert
[ -e $f ] || \
    sed -e "s/MAILHOST/$mailhost/" -e "s/MONIT_ADDR/$monit_addr/" \
        ${f##*/}.template > $f


f=$monitd/config
[ -e $f ] || cp ${f##*/} $f


function monit_disks () {
    local outfile=$1
    local disk dname

    shift

    for disk; do

        case $disk in
            /) dname=rootfs ;;
            *) dname=${disk//\/} ;;
        esac

        ## Can also do IO rates.
        sed -e "s/FS/$dname/" -e "s|PATH|$disk|" disks.template >> $outfile
    done
    return 0
}                               # function monit_disks

case $my_system in
    slac)
        ## Ignoring: /boot, and in older installs: /scswork, /usr/vice/cache.
        ## vi do not have separate /tmp.
        monit_disks="/"
        ## dc nodes have /data.
        ## Older installs have separate /opt /scratch /var.
        ## Newer ones have /home instead.
        monit_disks2="/lsst-ir2db01 /data /home /opt /scratch /tmp /var"
        ;;
    tucson)
        ## Could loop over lvm volumes, or /dev/mapper.
        monit_disks="/ /home"
        monit_disks2="/data" # eg fp01, db01
        ;;
esac

[ -e $monitd/disks ] || monit_disks $monitd/disks $monit_disks


[ "$monit_disks2" ] && for disk in $monit_disks2; do

    grep -q "[ 	]$disk[ 	]" /etc/fstab || continue

    monit_disks $monitd/disks-local $disk
done


## Alert if a client loses gpfs.
f=$monitd/gpfs-exists

[ $my_system = slac ] && grep -q "^lsst-fs[123].*gpfs" /etc/fstab && \
    [ ! -e $f ] && cp ${f##*/} $f


## Check gpfs capacity.
f=$monitd/gpfs
[ $shost = lsst-it01 ] && [ ! -e $f ] && cp ${f##*/} $f


## TODO derive host lists from eg clustershell config?
case $shost in
    lsst-it01)
        ## Excluding lions and unos, which often go up and down.
        monit_ping="lsst-ir2daq01 lsst-ir2db01 lsst-mcm lsst-ss01 lsst-ss02 lsst-vs01 lsst-vw01 lsst-vw02 lsst-dc01 lsst-dc02 lsst-dc03 lsst-dc04 lsst-dc05 lsst-dc06 lsst-dc07 lsst-dc08 lsst-dc09 lsst-dc10"
        monit_ping=$(printf "%s.slac.stanford.edu " $monit_ping)
        ;;
    comcam-fp01)
        monit_ping="comcam-db01 comcam-dc01 comcam-mcm comcam-vw01 comcam-hcu03 comcam-lion01 comcam-lion02 comcam-lion03 pathfinder-lion01"
        ;;
esac


f=$monitd/hosts
[ "$monit_ping" ] && [ ! -e $f ] && {
    for ping in $monit_ping; do
        sed -e "s/HOST/${ping%%.*}/" -e "s/ADDRESS/$ping/" \
            ${f##*/}.template >> $f
    done
}                               # hosts


[[ $shost == *-mcm ]] && {
    f=$monitd/inlet-temp
    [ -e $f ] || cp ${f##*/} $f

    f=/usr/local/bin/monit_inlet_temp
    cmp -s ${f##*/} $f || cp ${f##*/} $f
}


## Note that the use of "per core" requires monit >= 5.26.
## As of 2019/09, the epel7 version was 5.25.1.
## This required us to install a newer version in /usr/local/bin,
## and modify the service file, but it does mean the config file can
## be identical for all hosts.
## The epel version was updated 2020/03, so this is no longer needed.
## swap warning is not very useful, since Linux doesn't usually free swap.
## Maybe it should just be removed?
f=$monitd/system
[ -e $f ] || cp ${f##*/} $f

## We are using uptime to detect reboots. It also alerts on success.
## This could be suppressed with:
##  else if succeeded exec "/bin/false"
## but that means uptime is always in failed state.

## The "primary" network interface, eg em1 or p4p1.
eth0=$(nmcli -g ip4.address,general.device dev show 2> /dev/null | \
  gawk '/^(134|140|139)/ {getline; print $0; exit}')

[ "$eth0" ] || {
    echo "WARNING: unable to determine primary network interface"
    eth0=em1
}

## TODO try to automatically fix netspeed?
f=$monitd/network
[[ $shost == *-vi* ]] || [ -e $f ] || \
    sed "s/ETH0/$eth0/g" ${f##*/}.template > $f


f=/usr/local/bin/monit_netspeed
cmp -s ${f##*/} $f || cp ${f##*/} $f


case $shost in
    *-uno*|*-lion*|*-hcu*|*-aio*|*-lt*|*-vw*|*-vi*) : ;;
    *)
        f=$monitd/hwraid
        [ -e $f ] || cp ${f##*/} $f

        ## Needs the raid utility (eg perccli64) to be installed separately.
        f=/usr/local/bin/monit_hwraid
        cmp -s ${f##*/} $f || cp ${f##*/} $f
    ;;
esac


### [ -e /etc/systemd/system/monit.service ] || \
###     sed 's|/usr/bin/monit|/usr/local/bin/monit|g' \
###         /usr/lib/systemd/system/monit.service > \
###         /etc/systemd/system/monit.service

systemctl -q is-enabled monit || systemctl enable monit

## Note that we configure this monit with --prefix=/usr so that
## it consults /etc/monitrc, and install just the binary by hand.
### if [ -e /usr/local/bin/monit ] || \
###        cp -p $pkgarchive/monit /usr/local/bin/monit; then
###     systemctl start monit
### else
###     echo "TODO: install /usr/local/bin/monit and start service"
### fi

systemctl start monit


exit 0
